/*
Worldwide layoffs Data Cleaning project

Skills used: Creating Tables, Inserting Data, JOINS, Removing Duplicates, Updating Data,Altering Table Structure,Deleting Rows.

*/

SELECT * 
FROM layoffs;

-- 1. Remove Duplicates 
-- 2. Standardize the Data (spelling)
-- 3. Remove Null Values or blank values
-- 4. Dropping Columns that are not needed

-- Create a copy of the raw data table named 'layoffs' 
-- This copy will be used for data cleaning and processing tasks
CREATE TABLE layoffs_staging
LIKE layoffs;

INSERT layoffs_staging
SELECT * 
FROM layoffs;

-- 1. Remove Duplicates 
-- Identify and mark duplicates rows 
SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry,total_laid_off, percentage_laid_off, `date`,stage,country, funds_raised_millions) as row_num
FROM layoffs_staging;

-- Using CTE to find duplicates
WITH duplicate_cte AS 
(
SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry,total_laid_off, percentage_laid_off, `date`,stage,country, funds_raised_millions) as row_num
FROM layoffs_staging
)
SELECT *
FROM duplicate_cte
WHERE row_num > 1;

SELECT *
FROM layoffs_staging
WHERE company = 'Casper';

-- Delete the duplicate rows, keeping only the first occurrence by creating 'layoffs_staging2' table

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT * 
FROM layoffs_staging2;

INSERT INTO layoffs_staging2
SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry,total_laid_off, percentage_laid_off, `date`,stage,country, funds_raised_millions) as row_num
FROM layoffs_staging;

DELETE
FROM layoffs_staging2
WHERE row_num > 1;

-- 2. Standardize the Data (spelling)
-- Take the white space out 

SELECT company,TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

-- Standardizing all similar entries to the same value 'Crypto' in the industry column

SELECT DISTINCT(industry)
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Looking at the location

SELECT DISTINCT(location)
FROM layoffs_staging2
ORDER BY 1;

-- Looking at the country

SELECT DISTINCT(country)
FROM layoffs_staging2
ORDER BY 1;

-- Changing similar entries to the same value 'United States' in the country column

SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET country =  TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Changing `date` data type from text to date and correct format

SELECT `date`,
STR_TO_DATE(`date`,'%m/%d/%Y')
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`,'%m/%d/%Y');

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- 3. Remove Null Values or blank values
-- Check the nulls in 'total_laid_off' column

SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;
-- It is not possible to populate 'total_laid_off' and 'percentage_laid_off' , because we don't have enought data

-- Populate unknown industries if they had multiple layoffs
SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry = '';

UPDATE layoffs_staging2
SET industry = NULL 
WHERE industry = '';

SELECT t1.industry,t2.industry
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
	ON t1.company = t2.company
WHERE (t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;

-- 4. Dropping Columns that are not needed
-- We delete rows that has both columns as blanks or nulls
DELETE
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- We drop 'row_num' that we already used and we don't need to use it in the future
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;
